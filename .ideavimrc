" options and mappings that are supported by both Vim and IdeaVim
:let mapleader = "\<Space>"
set nu
set relativenumber
set surround
set nerdtree
" :set showmode

set visualbell
set noerrorbells
set clipboard=unnamedplus
" set incsearch

set highlightedyank
"Switch between buffers"
nnoremap <leader><leader> <C-6>
set scrolloff=15 " Keep 3 lines below and above the cursor

" Paste in selection mode while keeping the register intact
xnoremap p pgvy

inoremap jf <esc>
inoremap fj <esc>
" For deleting a widget from within braces '()'
nnoremap <leader>w f(v%oB

" Duplicate selection
vmap <leader>d y'>o<C-R>0<Esc>



"New line from normal mode"
nnoremap <Leader>o o<Esc>0"_D
nnoremap <Leader>O O<Esc>0"_D

"This mapping makes macros even easier to remember: hit qq to record, q to stop recording, and Q to apply.
nnoremap Q @q
vnoremap Q :norm @q<cr>

" Center after vertical movement
nnoremap <C-d> <C-d>zz
nnoremap <C-u> <C-u>zz


nnoremap <silent> J :<C-U>exec "exec 'norm m`' \| move +" . (0+v:count1)<CR>==``
nnoremap <silent> K :<C-U>exec "exec 'norm m`' \| move -" . (1+v:count1)<CR>==``
xnoremap <silent> J :<C-U>exec "'<,'>move '>+" . (0+v:count1)<CR>gv=gv
xnoremap <silent> K :<C-U>exec "'<,'>move '<-" . (1+v:count1)<CR>gv=gv

"Delete till next ;
nnoremap <leader>; WBv/;<cr>

" gi already moves to "last place you exited insert mode", so we'll map gI to
" something similar: move to last change
nnoremap gI `.

" Select all"
nnoremap <leader>a V$%o_

"system clipboard access
" noremap <leader>y "+y
" noremap <leader>p "+p



" Next and Last {{{

" Motion for "next/last object".  "Last" here means "previous", not "final".
" Unfortunately the "p" motion was already taken for paragraphs.
"RESOLVE TRICLIMATE
" Next acts on the next object of the given type in the current line, last acts
" on the previous object of the given type in the current line.
"
" Currently only works for (, [, {, b, r, B, ', and ".
"
" Some examples (C marks cursor positions, V means visually selected):
"
" din'  -> delete in next single quotes                foo = bar('spam')
"                                                      C
"                                                      foo = bar('')
"                                                                C
"
" canb  -> change around next parens                   foo = bar('spam')
"                                                      C
"                                                      foo = bar
"                                                               C
"
" vil"  -> select inside last double quotes            print "hello ", name
"                                                                        C
"                                                      print "hello ", name
"                                                             VVVVVV

" onoremap an :<c-u>call <SID>NextTextObject('a', 'f')<cr>
" xnoremap an :<c-u>call <SID>NextTextObject('a', 'f')<cr>
" onoremap in :<c-u>call <SID>NextTextObject('i', 'f')<cr>
" xnoremap in :<c-u>call <SID>NextTextObject('i', 'f')<cr>
" "
" onoremap al :<c-u>call <SID>NextTextObject('a', 'F')<cr>
" xnoremap al :<c-u>call <SID>NextTextObject('a', 'F')<cr>
" onoremap il :<c-u>call <SID>NextTextObject('i', 'F')<cr>
" xnoremap il :<c-u>call <SID>NextTextObject('i', 'F')<cr>
" "
" function! s:NextTextObject(motion, dir)
" "  let c = nr2char(getchar())
" "
" "  if c ==# "b"
" "      let c = "("
" "  elseif c ==# "B"
" "      let c = "{"
" "  elseif c ==# "r"
" "      let c = "["
" "  endif
" "
" "  exe "normal! ".a:dir.c."v".a:motion.c
" endfunction

" }}}


" Redirect all delete-operations to black-hole
" Use 'm' ("move") for all cut-operations
nnoremap d "_d
nnoremap da "_da
nnoremap dd "_dd
nnoremap di "_di
nnoremap m d
nnoremap x "_x
nnoremap c "_c
nnoremap X "_X
nnoremap s "_s
nnoremap S "_S
xnoremap d "_d
xnoremap dd "_dd

" This is the regular behavior of vim: the selected value that gets replaced is put into the register
xnoremap <leader>p p

if has('ide')
  " mappings and options that exist only in IdeaVim
  nnoremap yim j:action MethodUp<cr>f{vi{y
  nnoremap dim j:action MethodUp<cr>f{vi{d
  nnoremap cim j:action MethodUp<cr>f{vi{c
  nnoremap yam j:action MethodUp<cr>v0Of{%y
  nnoremap dam j:action MethodUp<cr>v0Of{%d
  nnoremap cam j:action MethodUp<cr>v0Of{%c
  map <leader>g <Action>(FindInPath)
  map <leader>b <Action>(FindUsages)
  map <leader>t <Action>(GotoNextError)
  map <leader>s <Action>(CollapseAll)<Action>(SelectInProjectView)
  map <leader>n <Action>(RenameFile)
  map <leader>e <Action>(RenameElement)
  map <leader>m <Action>(ToggleDistractionFreeMode)
  map <leader>l <Action>(MoveTabRight)
  map <leader>h <Action>(Back)
  map <leader>, <Action>(HideAllWindows)
  map <leader>j <Action>(MethodDown)
  map <leader>k <Action>(MethodUp)
  map <leader>d <Action>(ActivateDartAnalysisToolWindow)
  map <leader>4 <Action>(ActivateRunToolWindow)
  map <leader>u <Action>(PrevSplitter)
  map <leader>i <Action>(NextSplitter)
  map <leader>z <Action>(Vcs.ShowHistoryForBlock)
  map <leader>7 <Action>(Vcs.ShowHistoryForBlock)
  nmap <Leader>r :action ActivateTerminalToolWindow<CR>
  nmap <Leader>h :action ShowHoverInfo<CR>


  if &ide =~? 'intellij idea'
    if &ide =~? 'community'
      " some mappings and options for IntelliJ IDEA Community Edition
    elseif &ide =~? 'ultimate'
      " some mappings and options for IntelliJ IDEA Ultimate Edition
    endif
  elseif &ide =~? 'pycharm'
    " PyCharm specific mappings and options
  endif
else
  " some mappings for Vim/Neovim
  nnoremap <leader>f <cmd>Telescope find_files<cr>
endif
